// Copyright (c) 2020 Alexandr Kolodkin <alexandr.kolodkin@gmail.com>
// All rights reserved.


#include <stddef.h>
#include <stdint.h>
#include <stdbool.h>

#include "config.h"
#include "loader.h"

extern uint32_t __isr_start; // vector table base address


#define VECT_TAB_OFFSET  0x00000000U

uint32_t SystemCoreClock = 16000000;
const uint8_t AHBPrescTable[16U] = {0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 4, 6, 7, 8, 9};
const uint8_t APBPrescTable[8U] =  {0, 0, 0, 0, 1, 2, 3, 4};

void Error_Handler(void) {
	for(;;);
}

static inline void SystemClock_Config(void) {
	LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
	if (LL_FLASH_GetLatency() != LL_FLASH_LATENCY_0) Error_Handler();

	LL_RCC_HSI_SetCalibTrimming(16);
	LL_RCC_HSI_Enable();

	// Wait till HSI is ready
	while(LL_RCC_HSI_IsReady() != 1);

	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);

	// Wait till System clock is ready
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI);

//	LL_Init1msTick(8000000);
//	LL_SetSystemCoreClock(8000000);
}

// I2C1 GPIO Configuration
//  PB8   ------> I2C1_SCL
//  PB9   ------> I2C1_SDA
static inline void MX_I2C1_Init(void) {


	LL_GPIO_InitTypeDef GPIO_InitStruct = {
		.Pin              = LL_GPIO_PIN_8|LL_GPIO_PIN_9,
		.Mode             = LL_GPIO_MODE_ALTERNATE,
		.Speed            = LL_GPIO_SPEED_FREQ_HIGH,
		.OutputType       = LL_GPIO_OUTPUT_OPENDRAIN,
		.Pull             = 0
	};

	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	LL_GPIO_AF_EnableRemap_I2C1();

	// Peripheral clock enable
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_I2C1);

	// I2C Initialization
	LL_I2C_DisableOwnAddress2(I2C1);
	LL_I2C_DisableGeneralCall(I2C1);
	LL_I2C_EnableClockStretching(I2C1);

	LL_I2C_InitTypeDef I2C_InitStruct = {
		.PeripheralMode   = LL_I2C_MODE_I2C,
		.ClockSpeed       = 100000,
		.DutyCycle        = LL_I2C_DUTYCYCLE_2,
		.OwnAddress1      = 0,
		.TypeAcknowledge  = LL_I2C_ACK,
		.OwnAddrSize      = LL_I2C_OWNADDRESS1_7BIT
	};

	LL_I2C_Init(I2C1, &I2C_InitStruct);
	LL_I2C_SetOwnAddress2(I2C1, 0);
}


// SPI1 GPIO Configuration
//  PB3   ------> SPI1_SCK
//  PB4   ------> SPI1_MISO
//  PB5   ------> SPI1_MOSI
static void MX_SPI1_Init(void) {

	LL_GPIO_InitTypeDef GPIO_InitStruct = {
		.Pin            = LL_GPIO_PIN_3|LL_GPIO_PIN_5,
		.Mode           = LL_GPIO_MODE_ALTERNATE,
		.Speed          = LL_GPIO_SPEED_FREQ_HIGH,
		.OutputType     = LL_GPIO_OUTPUT_PUSHPULL,
		.Pull           = 0
	};

	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	GPIO_InitStruct.Pin  = LL_GPIO_PIN_4;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	LL_GPIO_AF_EnableRemap_SPI1();

	// SPI1 parameter configuration
	LL_SPI_InitTypeDef SPI_InitStruct = {
		.TransferDirection    = LL_SPI_FULL_DUPLEX,
		.Mode                 = LL_SPI_MODE_MASTER,
		.DataWidth            = LL_SPI_DATAWIDTH_8BIT,
		.ClockPolarity        = LL_SPI_POLARITY_LOW,
		.ClockPhase           = LL_SPI_PHASE_1EDGE,
		.NSS                  = LL_SPI_NSS_SOFT,
		.BaudRate             = LL_SPI_BAUDRATEPRESCALER_DIV2,
		.BitOrder             = LL_SPI_MSB_FIRST,
		.CRCCalculation       = LL_SPI_CRCCALCULATION_DISABLE,
		.CRCPoly              = 10
	};
	LL_SPI_Init(SPI1, &SPI_InitStruct);
}

// USART1 GPIO Configuration
//  PB6   ------> USART1_TX
//  PB7   ------> USART1_RX
static inline void MX_USART1_UART_Init(void) {

	LL_GPIO_InitTypeDef GPIO_InitStruct = {
		.Pin            = LL_GPIO_PIN_6,
		.Mode           = LL_GPIO_MODE_ALTERNATE,
		.Speed          = LL_GPIO_SPEED_FREQ_HIGH,
		.OutputType     = LL_GPIO_OUTPUT_PUSHPULL,
		.Pull = 0
	};

	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	GPIO_InitStruct.Pin  = LL_GPIO_PIN_7;
	GPIO_InitStruct.Mode = LL_GPIO_MODE_FLOATING;
	LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
	LL_GPIO_AF_EnableRemap_USART1();

	LL_USART_InitTypeDef USART_InitStruct = {
		.BaudRate             = 115200,
		.DataWidth            = LL_USART_DATAWIDTH_8B,
		.StopBits             = LL_USART_STOPBITS_1,
		.Parity               = LL_USART_PARITY_NONE,
		.TransferDirection    = LL_USART_DIRECTION_TX_RX,
		.HardwareFlowControl  = LL_USART_HWCONTROL_NONE,
		.OverSampling         = LL_USART_OVERSAMPLING_16
	};
	LL_USART_Init(USART1, &USART_InitStruct);
	LL_USART_ConfigAsyncMode(USART1);
	LL_USART_Enable(USART1);
}

void MySystemInit (void) {
	RCC->CR   |= 0x00000001U; // Set HSION bit
	RCC->CFGR &= 0xF0FF0000U; // Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits
	RCC->CR   &= 0xFEF6FFFFU; // Reset HSEON, CSSON and PLLON bits
	RCC->CR   &= 0xFFFBFFFFU; // Reset HSEBYP bit
	RCC->CFGR &= 0xFF80FFFFU; // Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits
	RCC->CR   &= 0xEBFFFFFFU; // Reset PLL2ON and PLL3ON bits
	RCC->CIR   = 0x00FF0000U; // Disable all interrupts and clear pending bits
	RCC->CFGR2 = 0x00000000U; // Reset CFGR2 register

	// Reset of all peripherals, Initializes the Flash interface
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_AFIO);
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
//	NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);

	// NOJTAG: JTAG-DP Disabled and SW-DP Enabled
	LL_GPIO_AF_Remap_SWJ_NOJTAG();

	// Configure the system clock
	SystemClock_Config();

	// Peripheral clock enable
	LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_GPIOA | LL_APB2_GRP1_PERIPH_GPIOB | LL_APB2_GRP1_PERIPH_USART1 | LL_APB2_GRP1_PERIPH_SPI1);

	// Initialize all configured peripherals
	MX_I2C1_Init();
	MX_SPI1_Init();
#ifdef TEST
	MX_USART1_UART_Init();
#endif
}

static inline void Print(char *msg) {
	while (*msg) {
		while (!LL_USART_IsActiveFlag_TXE(USART1));
		LL_USART_TransmitData8(USART1, *msg++);
	}
}

// Initialize the MCU Clock, the GPIO Pins corresponding to the
// device and initialize the FSMC with the chosen configuration
//   Outputs      :
//      R0        : "1"  : Operation succeeded
//                  "0"  : Operation failure
// Note: Mandatory for all types of device
int Init(void) {
	MySystemInit();
	DBG_PRINT("Init");
#ifdef TEST
	test();
#endif
	return 1;
}

// Read data from the device
//   Inputs       :
//      Address   : Write location
//      Size      : Length in bytes
//      buffer    : Address where to get the data to write
//   Outputs      :
//      R0        : "1" : Operation succeeded
//                  "0" : Operation failure
// Note: Mandatory for all types except SRAM and PSRAM
int Read(uint32_t Address, uint32_t Size, uint8_t* buffer) {
	DBG_PRINT("Read");

	// Disable Pos
	LL_I2C_DisableBitPOS(I2C1);
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
	LL_I2C_GenerateStartCondition(I2C1);
	while (!LL_I2C_IsActiveFlag_SB(I2C1));

	// Read state
	(void) I2C1->SR1;
	LL_I2C_TransmitData8(I2C1, CONFIG_EEPROM_ADDRESS | I2C_REQUEST_WRITE);
	while (!LL_I2C_IsActiveFlag_ADDR(I2C1)){};
	LL_I2C_ClearFlag_ADDR(I2C1);
	LL_I2C_TransmitData8(I2C1, (uint8_t) (Address >> 8));
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));
	LL_I2C_TransmitData8(I2C1, (uint8_t) Address);
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));
	LL_I2C_GenerateStartCondition(I2C1);
	while (!LL_I2C_IsActiveFlag_SB(I2C1));
	(void) I2C1->SR1;
	LL_I2C_TransmitData8(I2C1, CONFIG_EEPROM_ADDRESS | I2C_REQUEST_READ);
	while (!LL_I2C_IsActiveFlag_ADDR(I2C1)){};
	LL_I2C_ClearFlag_ADDR(I2C1);
	for (uint32_t i = 0; i < Size; i++) {
		if (i < (Size-1)) {
			while (!LL_I2C_IsActiveFlag_RXNE(I2C1));
			buffer[i] = LL_I2C_ReceiveData8(I2C1);
		} else {
			LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_NACK);
			LL_I2C_GenerateStopCondition(I2C1);
			while (!LL_I2C_IsActiveFlag_RXNE(I2C1));
			buffer[i] = LL_I2C_ReceiveData8(I2C1);
		}
	}

	return 1;
}


// Write data from the device
//   Inputs:
//      Address   : Write location
//      Size      : Length in bytes
//      buffer    : Address where to get the data to write
//   Outputs      :
//      R0        : "1" : Operation succeeded
//                  "0" : Operation failure
// Note: Mandatory for all types except SRAM and PSRAM
int Write(uint32_t Address, uint32_t Size, uint8_t* buffer){
	DBG_PRINT("Write");

	// Disable Pos
	LL_I2C_DisableBitPOS(I2C1);
	LL_I2C_AcknowledgeNextData(I2C1, LL_I2C_ACK);
	LL_I2C_GenerateStartCondition(I2C1);
	while (!LL_I2C_IsActiveFlag_SB(I2C1));

	// Read state
	(void) I2C1->SR1;
	LL_I2C_TransmitData8(I2C1, CONFIG_EEPROM_ADDRESS | I2C_REQUEST_WRITE);
	while (!LL_I2C_IsActiveFlag_ADDR(I2C1));
	LL_I2C_ClearFlag_ADDR(I2C1);
	LL_I2C_TransmitData8(I2C1, (uint8_t) (Address>>8));
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));
	LL_I2C_TransmitData8(I2C1, (uint8_t) Address);
	while (!LL_I2C_IsActiveFlag_TXE(I2C1));
	for (uint32_t i = 0; i < Size; i++) {
		LL_I2C_TransmitData8(I2C1, buffer[i]);
		while(!LL_I2C_IsActiveFlag_TXE(I2C1));
	}
	LL_I2C_GenerateStopCondition(I2C1);

	return 1;
}

// Erase a full sector in the device
//   Inputs    :
//     None
//   Outputs   :
//     R0             : "1" : Operation succeeded
// 			 "0" : Operation failure
// Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
int MassErase(void) {
	DBG_PRINT("MassErase");
	return 1;
}


// Erase a full sector in the device
//   Inputs    :
//      SectrorAddress	: Start of sector
//      Size          : Size (in WORD)
//      InitVal       : Initial CRC value
//   Outputs   :
//     R0             : "1" : Operation succeeded
// 			 "0" : Operation failure
// Note: Not Mandatory for SRAM PSRAM and NOR_FLASH
int SectorErase(uint32_t EraseStartAddress, uint32_t EraseEndAddress) {
	DBG_PRINT("SectorErase");
//	EraseStartAddress = EraseStartAddress -  EraseStartAddress%0x10000;
//	while (EraseEndAddress>=EraseStartAddress) {
//		EraseStartAddress += 0x10000;
//	}
	return 1;
}

// Description :
// Calculates checksum value of the memory zone
// Inputs    :
//      StartAddress  : Flash start address
//      Size          : Size (in WORD)
//      InitVal       : Initial CRC value
// Outputs   :
//     R0             : Checksum value
// Note: Optional for all types of device
uint32_t CheckSum(uint32_t StartAddress, uint32_t Size, uint32_t InitVal) {
	DBG_PRINT("CheckSum");
/*
	uint8_t missalignementAddress = StartAddress % 4;
	uint8_t missalignementSize = Size ;
	uint32_t Val;

	StartAddress -= StartAddress % 4;
	Size += ((Size % 4) == 0) ? 0 : (4 - (Size % 4));

	for (size_t cnt=0; cnt<Size; cnt+=4) {
		Read(StartAddress, sizeof(Val), (uint8_t*) &Val);
		Val = __REV(Val);

		if (missalignementAddress) {
			switch (missalignementAddress) {
			case 1:
				InitVal += (uint8_t) (Val>>8 & 0xff);
				InitVal += (uint8_t) (Val>>16 & 0xff);
				InitVal += (uint8_t) (Val>>24 & 0xff);
				missalignementAddress-=1;
				break;
			case 2:
				InitVal += (uint8_t) (Val>>16 & 0xff);
				InitVal += (uint8_t) (Val>>24 & 0xff);
				missalignementAddress-=2;
				break;
			case 3:
				InitVal += (uint8_t) (Val>>24 & 0xff);
				missalignementAddress-=3;
			}
		} else if (((Size - missalignementSize) % 4) && ((Size - cnt) <= 4)) {
			switch (Size - missalignementSize) {
			case 1:
				InitVal += (uint8_t) Val;
				InitVal += (uint8_t) (Val>>8 & 0xff);
				InitVal += (uint8_t) (Val>>16 & 0xff);
				missalignementSize-=1;
				break;
			case 2:
				InitVal += (uint8_t) Val;
				InitVal += (uint8_t) (Val>>8 & 0xff);
				missalignementSize-=2;
				break;
			case 3:
				InitVal += (uint8_t) Val;
				missalignementSize-=3;
			}
		} else {
			InitVal += (uint8_t) Val;
			InitVal += (uint8_t) (Val >>  8 & 0xff);
			InitVal += (uint8_t) (Val >> 16 & 0xff);
			InitVal += (uint8_t) (Val >> 24 & 0xff);
		}
		StartAddress += 4;
	}

	return (InitVal);
*/
return 0;
}

// Verify flash memory with RAM buffer and calculates checksum value of
// the programmed memory
//   Inputs    :
//      FlashAddr     : Flash address
//      RAMBufferAddr : RAM buffer address
//      Size          : Size (in WORD)
//      InitVal       : Initial CRC value
//   Outputs   :
//     R0             : Operation failed (address of failure)
//     R1             : Checksum value
// Note: Optional for all types of device
uint64_t Verify (uint32_t MemoryAddr, uint32_t RAMBufferAddr, uint32_t Size, uint32_t missalignement)
{
	DBG_PRINT("Verify");
//  uint32_t InitVal = 0;
//  uint32_t VerifiedData = 0;
//  uint8_t TmpBuffer = 0x00;
//	uint64_t checksum;
//  Size*=4;
//
//  checksum = CheckSum((uint32_t)MemoryAddr + (missalignement & 0xf), Size - ((missalignement >> 16) & 0xF), InitVal);
//
//  while (Size>VerifiedData)
//  {
////    sFLASH_ReadBuffer(&TmpBuffer, MemoryAddr+VerifiedData, 1);
//
//    if (TmpBuffer != *((uint8_t*)RAMBufferAddr+VerifiedData))
//      return ((checksum<<32) + MemoryAddr+VerifiedData);
//
//    VerifiedData++;
//  }
//
//  return (checksum<<32);
	return 0;
}

int test(void) {
	uint8_t buffer[CONFIG_EEPROM_PAGE_SIZE];
	size_t const pages_count = CONFIG_EEPROM_SIZE / CONFIG_EEPROM_PAGE_SIZE;
	for (size_t i = 0; i < pages_count; i++) {
		if (!Read(i * CONFIG_EEPROM_PAGE_SIZE, CONFIG_EEPROM_PAGE_SIZE, buffer)) return 0;
	}
	return 1;
}

// Main function for flash version
void loop (void) {
	if (Init()) test();
	for (;;);
}

